<%= angular %>
<script>
    /*! angular-base64-upload - v0.1.16
* https://github.com/adonespitogo/angular-base64-upload
* Copyright (c) Adones Pitogo <pitogo.adones@gmail.com> [January 26, 2016]
* Licensed MIT */
(function (window, undefined) {

  'use strict';

  /* istanbul ignore next */
  window._arrayBufferToBase64 = function ( buffer ) { //http://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode( bytes[ i ] );
    }
    return window.btoa( binary );
  };


  var mod = window.angular.module('naif.base64', []);

  mod.directive('baseSixtyFourInput', [
    '$window',
    '$q',
    function ($window, $q) {

      var isolateScope = {
        onChange: '&',
        onAfterValidate: '&',
        parser: '&'
      };

      var FILE_READER_EVENTS = ['onabort', 'onerror', 'onloadstart', 'onloadend', 'onprogress', 'onload'];
      for (var i = FILE_READER_EVENTS.length - 1; i >= 0; i--) {
        var e = FILE_READER_EVENTS[i];
        isolateScope[e] = '&';
      }

      return {
        restrict: 'A',
        require: '?ngModel',
        scope: isolateScope,
        link: function (scope, elem, attrs, ngModel) {

          /* istanbul ignore if */
          if (!ngModel) {
            return;
          }

          var rawFiles = [];
          var fileObjects = [];

          ngModel.$isEmpty = function (val) {
            return !val || (angular.isArray(val)? val.length === 0 : !val.base64);
          };

          // http://stackoverflow.com/questions/1703228/how-can-i-clear-an-html-file-input-with-javascript
          scope._clearInput = function () {
            try { //for IE11, latest Chrome/Firefox/Opera...
              elem.value = '';
            }catch (err) { //for IE5 ~ IE10
              elem.replaceWith(elem.clone(true));
            }
          };

          scope.$watch(function () {
            return ngModel.$viewValue;
          }, function (val, oldVal) {
            if (ngModel.$isEmpty(oldVal)) {return;}
            if (ngModel.$isEmpty(val)) {
              scope._clearInput();
            }
          });

          elem.on('change', function(e) {

            if(!e.target.files.length) {
              return;
            }

            fileObjects = [];
            fileObjects = angular.copy(fileObjects);
            rawFiles = e.target.files; // use event target so we can mock the files from test
            _readFiles();
            _onChange(e);
            _onAfterValidate(e);
          });

          function _readFiles () {
            for (var i = rawFiles.length - 1; i >= 0; i--) {
              var reader = new $window.FileReader();
              var file = rawFiles[i];
              var fileObject = {};

              fileObject.filetype = file.type;
              fileObject.filename = file.name;
              fileObject.filesize = file.size;

              // append file a new promise, that waits until resolved
              rawFiles[i].deferredObj = $q.defer();

              _attachEventHandlers(reader, file, fileObject);

              reader.readAsArrayBuffer(file);
            }
          }

          function _onChange (e) {
            if (attrs.onChange) {
              scope.onChange()(e, rawFiles);
            }
          }

          function _onAfterValidate (e) {
            if (attrs.onAfterValidate) {
              // wait for all promises, in rawFiles,
              //   then call onAfterValidate
              var promises = [];
              for (var i = rawFiles.length - 1; i >= 0; i--) {
                promises.push(rawFiles[i].deferredObj.promise);
              }
              $q.all(promises).then(function(){
                scope.onAfterValidate()(e, fileObjects, rawFiles);
              });
            }
          }

          function _attachEventHandlers (fReader, file, fileObject) {

            for (var i = FILE_READER_EVENTS.length - 1; i >= 0; i--) {
              var e = FILE_READER_EVENTS[i];
              if (attrs[e] && e !== 'onload') { // don't attach handler to onload yet
                _attachHandlerForEvent(e, scope[e], fReader, file, fileObject);
              }
            }

            fReader.onload = _readerOnLoad(fReader, file, fileObject);
          }

          function _attachHandlerForEvent (eventName, handler, fReader, file, fileObject) {
            fReader[eventName] =  function (e) {
              handler()(e, fReader, file, rawFiles, fileObjects, fileObject);
            };
          }

          function _readerOnLoad (fReader, file, fileObject) {

            return function (e) {

              var buffer = e.target.result;
              var promise;

              fileObject.base64 = $window._arrayBufferToBase64(buffer);

              if (attrs.parser) {
                promise = $q.when(scope.parser()(file, fileObject));
              } else {
                promise = $q.when(fileObject);
              }

              promise.then(function (fileObj) {
                fileObjects.push(fileObj);
                _setViewValue();

                // fulfill the promise here.
                file.deferredObj.resolve();
              });

              if (attrs.onload) {
                scope.onload()(e, fReader,  file, rawFiles, fileObjects, fileObject);
              }

            };

          }

          function _setViewValue () {
              var newVal = attrs.multiple ? fileObjects : fileObjects[0];
              ngModel.$setViewValue(newVal);
              if (angular.isFunction(ngModel.$validate)) {
                ngModel.$validate();
              }

              // manually run parsers for angular versions >= 1.3.4 since they are not triggered automatically on ngModel.$setViewValue
              var v = angular.version.full.split('.');

              if (v[0] === '1' && v[1] === '3' && parseInt(v[2]) >= 4) {
                var val = ngModel.$viewValue;
                _maxsize(val);
                _minsize(val);
                _maxnum(val);
                _minnum(val);
                _accept(val);
              }
          }

          // VALIDATIONS =========================================================

          function _maxnum (val) {
            if (attrs.maxnum && attrs.multiple && val) {
              var valid = val.length <= parseInt(attrs.maxnum);
              ngModel.$setValidity('maxnum', valid);
            }
            return val;
          }

          function _minnum (val) {
            if (attrs.minnum && attrs.multiple && val) {
              var valid = val.length >= parseInt(attrs.minnum);
              ngModel.$setValidity('minnum', valid);
            }
            return val;
          }

          function _maxsize (val) {
            var valid = true;

            if (attrs.maxsize && val) {
              var max = parseFloat(attrs.maxsize) * 1000;

              if (attrs.multiple) {
                for (var i = 0; i < val.length; i++) {
                  var file = val[i];
                  if (file.filesize > max) {
                    valid = false;
                    break;
                  }
                }
              }
              else {
                valid = val.filesize <= max;
              }
              ngModel.$setValidity('maxsize', valid);
            }

            return val;
          }

          function _minsize (val) {
            var valid = true;
            var min = parseFloat(attrs.minsize) * 1000;

            if (attrs.minsize && val) {
              if (attrs.multiple) {
                for (var i = 0; i < val.length; i++) {
                  var file = val[i];
                  if (file.filesize < min) {
                    valid = false;
                    break;
                  }
                }
              }
              else {
                valid = val.filesize >= min;
              }
              ngModel.$setValidity('minsize', valid);
            }

            return val;
          }

          function _accept (val) {
            var valid = true;
            var regExp, exp, fileExt;
            if(attrs.accept){
              exp = attrs.accept.trim().replace(/[,\s]+/gi, "|").replace(/\./g, "\\.").replace(/\/\*/g, "/.*");
              regExp = new RegExp(exp);
            }

            if (attrs.accept && val) {
              if (attrs.multiple) {
                for (var i = 0; i < val.length; i++) {
                  var file = val[i];
                  fileExt = "." + file.filename.split('.').pop();
                  valid = regExp.test(file.filetype) || regExp.test(fileExt);

                  if(!valid){ break; }
                }
              } else {
                fileExt = "." + val.filename.split('.').pop();
                valid = regExp.test(val.filetype) || regExp.test(fileExt);
              }
              ngModel.$setValidity('accept', valid);
            }

            return val;
          }

          ngModel.$parsers.push(_maxnum);
          ngModel.$parsers.push(_minnum);
          ngModel.$parsers.push(_maxsize);
          ngModel.$parsers.push(_minsize);
          ngModel.$parsers.push(_accept);

        }
      };

  }]);

})(window);
</script>
<script>
    var myApp = angular.module('app', ['ngResource', 'ngSanitize', 'naif.base64'], function($rootScopeProvider) { 
    //init app
    $rootScopeProvider.digestTtl(10); 
    });
    myApp.factory("Testpaper", function($resource, $http) { // CRUD Testpaper
      return $resource('http://smartlearn.herokuapp.com/test_papers/<%= @test_paper.id %>.json',{},{
            get:{
                method:"GET",
                isArray:false,
                headers:{'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'} 
            },
        });
    })
    
    myApp.factory("Answer", function($resource, $http) { // CRUD Answer
	  return {
	  	create: function(question) {
	  		console.log(question)
	  		question_id = question.id
	  		return $resource('http://smartlearn.herokuapp.com/questions/' + question_id + '/answers')
	  	}
	  	
	  }
	})
	



    myApp.controller('testpaper-controller', ['$scope','Testpaper','Answer', function($scope, Testpaper, Answer) {
        $scope.testpaper = Testpaper.get()
        $scope.selectedMainQuestionIndex = 0

        // Top Menu START 
	        $scope.setSelectedMainQuestionIndex = function(index) {
	          $scope.selectedMainQuestionIndex = index
	        }

	        $scope.incrementSelectedMainQuestionIndex = function() {
	          if ($scope.testpaper.mainquestions.length > $scope.selectedMainQuestionIndex + 1) {
	            $scope.selectedMainQuestionIndex += 1
	            $scope.setSelectedMainQuestionIndex($scope.selectedMainQuestionIndex)
	          }
	        }

	        $scope.decrementSelectedMainQuestionIndex = function() {
	          if ($scope.selectedMainQuestionIndex  > 0) {
	            $scope.selectedMainQuestionIndex -= 1
	            $scope.setSelectedMainQuestionIndex($scope.selectedMainQuestionIndex)
	          }
	        }
        // Top Menu END

        // Validations START
	        $scope.valid_marks = function(marks, total_marks) {
	          if (marks < (total_marks+ 1)) {
	            return true
	          } else {
	            return false
	          }  
	        }
        // Validations END
        $scope.full_marks = function(question) {
          if (question.total_marks == question.answer.marks) {
            return true
          }
        }

        $scope.finished_questions = 0
        // Add Answer Start
	        $scope.addAnswer = function(question) {
	        	Answer.create(question).save({
			      answer: {
			        question_id: question.id,
			        text: question.answer.what_went_wrong,
			        marks_integer: question.answer.marks,
                    picture_64: question.answer.picture,
			        user_id: 1
			      }
			    })
	        }
	        $scope.saveAnswer = function(question) {
	        	if ($scope.full_marks(question) == true) {
	        		question.answered = true
	        		$scope.addAnswer(question)
	        	} else {
	        		if (question.answer.what_went_wrong != undefined && question.answer.what_went_wrong != '') {
	        			question.answered = true
	        			$scope.addAnswer(question)
	        		} else {
	        			console.log("error")
	        			
	        		}
	        	}
	        }
        // Add answer End

    }])
</script>

<body ng-app="app" style="background-color:#F7F7F7;">
    <div class="ui stackable grid" ng-controller="testpaper-controller">
      <div class="ui sixteen wide verticaly attached column" style="padding-bottom: 0; padding-top:0">    
        <div class="ui horizontal middle attached segment" style="padding-bottom:0">
          <h1 class="ui top header container">
              {{testpaper.name}}
              <div class="sub header">
              {{testpaper.subject}}
              </div>
            </h1>
            <div class="ui button" ng-click="reversed=!reversed">Reverse</div>
            <div style=" padding-bottom:20px"></div>
          </div>
      </div>
      <div class="ui sixteen wide column">
        <div class="ui container">
          <div class="mainquestion">
            <div class="ui three top attached green inverted item blue large menu">
                <a class="item" style="width: 15%" ng-class="{disabled: selectedMainQuestionIndex == 0}"
                ng-click="decrementSelectedMainQuestionIndex()"><i class="ui left arrow  icon"></i>
                </a>
                <a class="ui dropdown item" style="width:70%">
                Question {{selectedMainQuestionIndex + 1}} <i class="ui dropdown icon"></i>
                  <div class="menu">
                      <div class="item" ng-repeat="mainquestion in testpaper.mainquestions" ng-click="setSelectedMainQuestionIndex($index)" ng-class="{selected: slectedMainQuestionIndex == $index}">Question {{$index + 1}}</div>
                  </div>
                </a>
                <a class="item" style="width: 15%" ng-class="{disabled: selectedMainQuestionIndex == testpaper.mainquestions.length - 1}"
                ng-click="incrementSelectedMainQuestionIndex()"><i class="ui right arrow  icon"></i>
                </a>
            </div>

            <div class="ui attached segment" ng-repeat="mainquestion in testpaper.mainquestions | orderBy: 'id': reversed" ng-show="$index == selectedMainQuestionIndex">
              <div class="questions segments" ng-repeat="question in mainquestion.questions | orderBy: 'position'">
                <div class="ui basic segment">
                  <div class="ui text container">
                    <h4 class="ui centered header">{{selectedMainQuestionIndex + 1}}){{question.position}}</h4>
                    <div class="ui accordion">
                      <div class="title">
                        <i class="dropdown icon"></i>
                      </div>
                      <div class="content">
                        <div ng-bind-html="question.html"></div>
                      </div>
                    </div>
                  </div>

                </div>
                <div 
                  class="ui basic secondary padded form segment"
                  ng-class="{
                    red: 
                      valid_marks(question.answer.marks, question.total_marks) && question.answer.marks != null && question.answer.marks < question.total_marks,

                      green: question.answer.marks == question.total_marks
                    }"
                  
                >

                  <div class="ui text container">       
                    <div class="ui red message" 
                       ng-show="full_marks(question) != true && question.answer.marks != null && question.answered == true"
                    >
                      <strong>Your mistake:</strong> {{question.answer.what_went_wrong}}
                    </div>      
                    <div class="ui inline field" ng-show="question.answered != true">
                      <div class="ui inline field" ng-class="{ error: question.answer.marks > question.total_marks }">
                        <input
                          type="number" 
                          ng-model="question.answer.marks"
                          min="0"
                        >/ {{question.total_marks}}
                      </div>
                    <div ng-show="question.answer.marks < question.total_marks && question.answer.marks != null" style="padding: 10px 0px">
                      <label>What went wrong?</label>
                        <textarea ng-model="question.answer.what_went_wrong"></textarea>
                        <div class="ui segment">
                            <h3>Lost for words? Take an image of your mistake</h3>
                            <input type='file' ng-model='question.answer.picture' accept="image/*" base-sixty-four-input>
                            {{question.answer.picture}}
                        </div>
                    </div>
                    <div class="ui accordion">
	                      	<div class="title">
	                       		<div class="ui basic button">
	                       			Mark Scheme <i class="dropdown icon"></i>
	                       		</div>
	                      	</div>
	                      	<div class="content">
	                        	<div ng-bind-html="mainquestion.answer_html"></div>
	                      	</div>
	                   	</div> 
                      
                      <div class="marks" 
                        ng-show="valid_marks(question.answer.marks, question.total_marks) && question.answer.marks != null " 
                        style="text-align: right">
                        <span class="ui red button" ng-click="saveAnswer(question)">Submit</span>
                      </div>
                      
                    </div>
                    
                  </div>
                  <div class="ui text container">
                    <div class="marks" 
                      ng-show="question.answered == true" 
                      style="text-align: right">
                      <a class="ui big link label" ng-click="question.answered = false">
                        {{question.answer.marks}}/{{question.total_marks}}
                      </a>

                    </div>
                  </div>
                </div>
                <div class="ui divider"></div>
              </div>
            </div> 
            <div class="ui bottom attached blue button" ng-click="incrementSelectedMainQuestionIndex()"><i class="ui right arrow icon"></i></div>
          </div>
        </div>
      </div>
    </div>
    <script>
$(window).on("load", function() {
  $(".accordion").accordion()
  $(".dropdown").dropdown()
  for (var i = 0; i < 5; i++) {
    setTimeout(function() {
      $(".accordion").accordion()
      $(".dropdown").dropdown()
    }, 100)
  };
  setTimeout(function() {
    $(".accordion").accordion()
  }, 1000)
    
})
</script>
</body>